/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$icon-a-name: 'icon_a';
$icon-a-x: 0px;
$icon-a-y: 0px;
$icon-a-offset-x: 0px;
$icon-a-offset-y: 0px;
$icon-a-width: 50px;
$icon-a-height: 50px;
$icon-a-total-width: 110px;
$icon-a-total-height: 104px;
$icon-a-image: '../img/sprite.png';
$icon-a: (0px, 0px, 0px, 0px, 50px, 50px, 110px, 104px, '../img/sprite.png', 'icon_a', );
$icon-new-name: 'icon_new';
$icon-new-x: 0px;
$icon-new-y: 60px;
$icon-new-offset-x: 0px;
$icon-new-offset-y: -60px;
$icon-new-width: 44px;
$icon-new-height: 44px;
$icon-new-total-width: 110px;
$icon-new-total-height: 104px;
$icon-new-image: '../img/sprite.png';
$icon-new: (0px, 60px, 0px, -60px, 44px, 44px, 110px, 104px, '../img/sprite.png', 'icon_new', );
$icon-q-name: 'icon_q';
$icon-q-x: 60px;
$icon-q-y: 0px;
$icon-q-offset-x: -60px;
$icon-q-offset-y: 0px;
$icon-q-width: 50px;
$icon-q-height: 50px;
$icon-q-total-width: 110px;
$icon-q-total-height: 104px;
$icon-q-image: '../img/sprite.png';
$icon-q: (60px, 0px, -60px, 0px, 50px, 50px, 110px, 104px, '../img/sprite.png', 'icon_q', );
$spritesheet-width: 110px;
$spritesheet-height: 104px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($icon-a, $icon-new, $icon-q, );
$spritesheet: (110px, 104px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
